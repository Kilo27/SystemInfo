/*
 * This source file was generated by the Gradle 'init' task
 */


import javax.swing.*;
import javax.swing.JComponent;
import java.awt.*;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

public class App {
	public static void main(String[] args) {

		MainMenuFrame mainMenuFrame = new MainMenuFrame();

	}
}

abstract class AbstractSystemInfoFrame extends JFrame {
	Color backgroundColor = Color.decode("#211832"); // Background Colour
	Color textColor = Color.decode("#FFFFFF"); // Text Colour
	int windowWidth = 1200;
	int windowHeight = 800;

	protected AbstractSystemInfoFrame() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // Exiting the window ends the program
		setResizable(false);
		setSize(windowWidth, windowHeight);
		setLayout(null); // using no layout manager
		getContentPane().setBackground(backgroundColor); // set background color
	}
}

class MainMenuFrame extends AbstractSystemInfoFrame {

	public MainMenuFrame() {

		super();
		setTitle("System Info - Main Menu");

		// Buttons
		JButton[] selectMenuButtons = {
				new JButton("CPU"),
				new JButton("Graphics"),
				new JButton("Memory"),
				new JButton("Disks"),
				new JButton("Network"),
				new JButton("USB Devices"),
		};


		int buttonDownShift = 220; // Y-Position of Top Button
		for (JButton button : selectMenuButtons) {
			button.setBounds(480, buttonDownShift, 200, 50);
			buttonDownShift += 50; // Moves down Y-Position for Next Button
			add(button);
		}

		// Add action to the button
		selectMenuButtons[0].addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				new CPUMenuFrame();
				dispose();
			}
		});
        selectMenuButtons[1].addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                new GraphicsMenuFrame();
                dispose();
            }
        });
        selectMenuButtons[2].addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                new MemoryMenuFrame();
                dispose();
            }
        });
        selectMenuButtons[3].addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                new DisksMenuFrame();
                dispose();
            }
        });
        selectMenuButtons[5].addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                new USBDevicesMenuFrame();
                dispose();
            }
        });


        // OS
        OSInfo osInfo = new OSInfo();

		JLabel osNameLabel = new JLabel(String.format("OS Name: %s", osInfo.family()));
        osNameLabel.setForeground(textColor);
        osNameLabel.setBounds(480,70,200,20);

        JLabel osManufacturerLabel = new JLabel(String.format("OS Manufacturer: %s", osInfo.manufacturer()));
        osManufacturerLabel.setForeground(textColor);
        osManufacturerLabel.setBounds(480,90,200,20);

        JLabel osVersionLabel = new JLabel(String.format("OS Version: %s", osInfo.versionInfo()));
        osVersionLabel.setForeground(textColor);
        osVersionLabel.setBounds(480,110,200,20);

        JLabel osFileSystemLabel = new JLabel(String.format("File System: %s", osInfo.fileSystem()));
        osFileSystemLabel.setForeground(textColor);
        osFileSystemLabel.setBounds(400,130,380,20);

        //JLabel osCurrentProcessLabel = new JLabel(String.format("Current Process: %s", osInfo.currentProcess()));
        //osCurrentProcessLabel.setForeground(textColor);
        //osCurrentProcessLabel.setBounds(400,150,380,20);

        //JLabel osCurrentThreadLabel = new JLabel(String.format("Current Thread: %s", osInfo.currentThread()));
        //osCurrentThreadLabel.setForeground(textColor);
        //osCurrentThreadLabel.setBounds(400,170,380,20);

        add(osNameLabel);
        add(osManufacturerLabel);
        add(osVersionLabel);
        add(osFileSystemLabel);
        //add(osCurrentProcessLabel);
        //add(osCurrentThreadLabel);

		// Make Frame Visible
		setVisible(true);
	}

}

class CPUMenuFrame extends AbstractSystemInfoFrame {
	public CPUMenuFrame() {
		super();
		ProcessorSpecs specs = new ProcessorSpecs();
		OshiMethod oshi = new OshiMethod();
		LogicalCPU threadCpu = new LogicalCPU();
		PhysicalCPU physicalCpu = new PhysicalCPU();
		SysMemory memory = new SysMemory();
		setTitle("System Info - CPU");

        // Main Menu Button
        JButton mainMenuButton = new  JButton("Main Menu");
        mainMenuButton.setBounds(0, 0, 150, 50);

        mainMenuButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                new MainMenuFrame();
                dispose();
            }
        });

        add(mainMenuButton);


		JLabel nameText = new JLabel(String.format("CPU: %s", ProcessorSpecs.name()));
		nameText.setBounds(480, 30, 500, 50);
		nameText.setForeground(textColor);
		JLabel familyText = new JLabel(String.format("Processor Family: %s", ProcessorSpecs.family()));
		familyText.setBounds(480, 80, 500, 50);
		familyText.setForeground(textColor);
		JLabel modelText = new JLabel(String.format("Model: %s", ProcessorSpecs.model()));
		modelText.setBounds(480, 130, 500, 50);
		modelText.setForeground(textColor);
		JLabel IDText = new JLabel(String.format("ID: %s", ProcessorSpecs.id()));
		IDText.setBounds(480, 180, 500, 50);
		IDText.setForeground(textColor);
		JLabel sixtyFourBitText = new JLabel(String.format("64 Bit: %s", ProcessorSpecs.is64Bit()));
		sixtyFourBitText.setBounds(480, 230, 500, 50);
		sixtyFourBitText.setForeground(textColor);
		JLabel microarchitecture = new JLabel(
				String.format("Microarchitecture: %s", ProcessorSpecs.microarchitecture()));
		microarchitecture.setBounds(480, 280, 500, 50);
		microarchitecture.setForeground(textColor);
		JLabel maxFrequency = new JLabel(String.format("Max Frequency: %s", CPUGeneric.getMaxFrequency()));
		maxFrequency.setBounds(480, 330, 500, 50);
		maxFrequency.setForeground(textColor);

		// Button to open a simple CPU-usage graph window
		JButton showGraphButton = new JButton("Show CPU Graph");
		showGraphButton.setBounds(700, 330, 150, 40);
		add(showGraphButton);

		// Local panel class that renders a simple live-updating line graph
		class CPUUsageGraphPanel extends JPanel {
			private final float[] samples = new float[200];
			private final Timer timer;

			CPUUsageGraphPanel() {
				setPreferredSize(new Dimension(800, 400));
				setBackground(Color.BLACK);

				// initialize samples
				for (int i = 0; i < samples.length; i++)
					samples[i] = 0f;

				// update samples periodically (simulated data)
				timer = new Timer(1000, e -> {
					System.arraycopy(samples, 1, samples, 0, samples.length - 1);
					// replace this with real CPU data when available
					samples[samples.length - 1] = (float) CPUUsage.getCPU() / 100f;
					repaint();
				});
				timer.start();
			}

			protected void paintComponent(Graphics g) {
				super.paintComponent(g);
				Graphics2D g2 = (Graphics2D) g;
				g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

				int w = getWidth();
				int h = getHeight();

				// background
				g2.setColor(Color.DARK_GRAY);
				g2.fillRect(0, 0, w, h);

				// grid
				g2.setColor(new Color(80, 80, 80));
				for (int y = 0; y <= 4; y++) {
					int yy = y * h / 4;
					g2.drawLine(0, yy, w, yy);
				}

				// draw line
				g2.setColor(Color.GREEN);
				int len = samples.length;
				int prevX = 0;
				int prevY = h - Math.round(samples[0] * h);
				for (int i = 1; i < len; i++) {
					int x = i * w / (len - 1);
					int y = h - Math.round(samples[i] * h);
					g2.drawLine(prevX, prevY, x, y);
					prevX = x;
					prevY = y;
				}

				// label
				g2.setColor(Color.WHITE);
				g2.drawString("Simulated CPU Usage (%)", 8, 18);
			}

			public void removeNotify() {
				timer.stop();
				super.removeNotify();
			}
		}

		showGraphButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				JFrame graphFrame = new JFrame("CPU Usage Graph");
				graphFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
				CPUUsageGraphPanel panel = new CPUUsageGraphPanel();
				graphFrame.getContentPane().add(panel);
				graphFrame.pack();
				graphFrame.setLocationRelativeTo(null);
				graphFrame.setVisible(true);
			}
		});

		add(nameText);
		add(familyText);
		add(modelText);
		add(IDText);
		add(sixtyFourBitText);
		add(microarchitecture);
		add(maxFrequency);

		setVisible(true);
	}
}

class GraphicsMenuFrame extends AbstractSystemInfoFrame {
	public GraphicsMenuFrame() {
		super();
		setTitle("System Info - Graphics");

        LocalGraphics graphics = new LocalGraphics();

        // Main Menu Button
        JButton mainMenuButton = new  JButton("Main Menu");
        mainMenuButton.setBounds(0, 0, 150, 50);

        mainMenuButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                new MainMenuFrame();
                dispose();
            }
        });

        add(mainMenuButton);

        // Labels
        JLabel[] graphicsLabels = {
                new JLabel(String.format("GPU Name: %s", graphics.graphicsName(0))),
                new JLabel(String.format("GPU Device ID: %s", graphics.graphicsDeviceId(0))),
                new JLabel(String.format("GPU Vendor: %s", graphics.graphicsVendor(0))),
                new JLabel(String.format("VRAM: %s", graphics.vramBytes(0))),
                new JLabel(String.format("GPU Version Information: %s", graphics.graphicsVersionInfo(0))),
                new JLabel(String.format("GPU Count: %d", graphics.gpuCount()))
        };


        int labelDownShift = 30; // Y-Position of Top Button
        for (JLabel iLabel : graphicsLabels) {
            iLabel.setBounds(480, labelDownShift, 300, 50);
            iLabel.setForeground(textColor);
            labelDownShift += 50; // Moves down Y-Position for Next Button
            add(iLabel);
        }

        setVisible(true);

	}
}

class MemoryMenuFrame extends AbstractSystemInfoFrame {
	public MemoryMenuFrame() {
		super();
		setTitle("System Info - Memory");
        SysMemory memory = new SysMemory();
        JLabel nameText = new JLabel("CPU: Hello");
        nameText.setBounds(480, 30, 500, 50);
        nameText.setForeground(textColor);

        // Main Menu Button
        JButton mainMenuButton = new  JButton("Main Menu");
        mainMenuButton.setBounds(0, 0, 150, 50);

        mainMenuButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                new MainMenuFrame();
                dispose();
            }
        });

        add(mainMenuButton);

        JLabel totalMemoryLabel = new JLabel(String.format("Total Memory: %s", memory.formatBytes(memory.totalMemory())));
        totalMemoryLabel.setBounds(480, 30, 500, 50);
        totalMemoryLabel.setForeground(textColor);

        JLabel availableMemoryLabel = new JLabel(String.format("Available Memory: %s", memory.formatBytes(memory.availableMemory())));
        availableMemoryLabel.setBounds(480, 80, 500, 50);
        availableMemoryLabel.setForeground(textColor);

        JLabel usedMemoryLabel = new JLabel(String.format("Used Memory: %s", memory.formatBytes(memory.usedMemory())));
        usedMemoryLabel.setBounds(480, 130, 500, 50);
        usedMemoryLabel.setForeground(textColor);

            JLabel virtualMemoryLabel = new JLabel(String.format("Virtual Memory: %s", memory.formatBytes(memory.virtualMemory())));
        virtualMemoryLabel.setBounds(480, 180, 500, 50);
        virtualMemoryLabel.setForeground(textColor);

        JLabel pageSizeLabel = new JLabel(String.format("Page Size: %s", memory.formatBytes(memory.pageSize())));
        pageSizeLabel.setBounds(480, 230, 500, 50);
        pageSizeLabel.setForeground(textColor);

        JLabel availableVirtualMemoryLabel = new JLabel(String.format("Available Virtual Memory: %s", memory.formatBytes(memory.availableVirtualMemory())));
        availableVirtualMemoryLabel.setBounds(480, 280, 500, 50);
        availableVirtualMemoryLabel.setForeground(textColor);

        // Button to open a simple CPU-usage graph window
        JButton showGraphButton = new JButton("Show Memory Graph");
        showGraphButton.setBounds(700, 330, 150, 40);
        add(showGraphButton);

        // Local panel class that renders a simple live-updating line graph
        class MemoryUsageGraphPanel extends JPanel {
            private final float[] samples = new float[200];
            private final Timer timer;

            MemoryUsageGraphPanel() {
                setPreferredSize(new Dimension(800, 400));
                setBackground(Color.BLACK);

                // initialize samples
                for (int i = 0; i < samples.length; i++)
                    samples[i] = 0f;

                // update samples periodically (simulated data)
                timer = new Timer(1000, e -> {
                    System.arraycopy(samples, 1, samples, 0, samples.length - 1);
                    // replace this with real CPU data when available
                    samples[samples.length - 1] = (float) memory.usedMemory() / memory.totalMemory();
                    repaint();
                });
                timer.start();
            }

            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                Graphics2D g2 = (Graphics2D) g;
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

                int w = getWidth();
                int h = getHeight();

                // background
                g2.setColor(Color.DARK_GRAY);
                g2.fillRect(0, 0, w, h);

                // grid
                g2.setColor(new Color(80, 80, 80));
                for (int y = 0; y <= 4; y++) {
                    int yy = y * h / 4;
                    g2.drawLine(0, yy, w, yy);
                }

                // draw line
                g2.setColor(Color.GREEN);
                int len = samples.length;
                int prevX = 0;
                int prevY = h - Math.round(samples[0] * h);
                for (int i = 1; i < len; i++) {
                    int x = i * w / (len - 1);
                    int y = h - Math.round(samples[i] * h);
                    g2.drawLine(prevX, prevY, x, y);
                    prevX = x;
                    prevY = y;
                }

                // label
                g2.setColor(Color.WHITE);
                g2.drawString("Simulated Memory Usage (%)", 8, 18);
            }

            public void removeNotify() {
                timer.stop();
                super.removeNotify();
            }
        }

        showGraphButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JFrame graphFrame = new JFrame("Memory Usage Graph");
                graphFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                MemoryUsageGraphPanel panel = new MemoryUsageGraphPanel();
                graphFrame.getContentPane().add(panel);
                graphFrame.pack();
                graphFrame.setLocationRelativeTo(null);
                graphFrame.setVisible(true);
            }
        });

        add(totalMemoryLabel);
        add(availableMemoryLabel);
        add(usedMemoryLabel);
        add(virtualMemoryLabel);
        add(pageSizeLabel);
        add(availableVirtualMemoryLabel);

        setVisible(true);
	}
}

class DisksMenuFrame extends AbstractSystemInfoFrame {
	public DisksMenuFrame() {
		super();
		setTitle("System Info - Disks");
        Disk disk = new Disk();

        // Main Menu Button
        JButton mainMenuButton = new  JButton("Main Menu");
        mainMenuButton.setBounds(0, 0, 150, 50);

        mainMenuButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                new MainMenuFrame();
                dispose();
            }
        });

        add(mainMenuButton);

        // Labels
        JLabel[] diskLabels = {
                new JLabel(String.format("Disk Size: %s", disk.size(0))),
                new JLabel(String.format("Disk Model: %s", disk.diskModel(0))),
                new JLabel(String.format("Disk Name: %s", disk.diskName(0))),
                new JLabel(String.format("Current Queue: %s", disk.currentQueue(0))),
                new JLabel(String.format("Transfer Time: %s", disk.transferTime(0))),
                new JLabel(String.format("Read Bytes: %s", disk.readBytes(0))),
                new JLabel(String.format("Write Bytes: %s", disk.writeBytes(0))),
                new JLabel(String.format("Total Reads: %s", disk.reads(0))),
                new JLabel(String.format("Total Writes: %s", disk.writes(0))),

        };


        int labelDownShift = 30; // Y-Position of Top Button
        for (JLabel iLabel : diskLabels) {
            iLabel.setBounds(480, labelDownShift, 300, 50);
            iLabel.setForeground(textColor);
            labelDownShift += 50; // Moves down Y-Position for Next Button
            add(iLabel);
        }

        // Button to open a simple CPU-usage graph window
        JButton showGraphButton = new JButton("Show Disk Usage Graph");
        showGraphButton.setBounds(700, 330, 150, 40);
        add(showGraphButton);

        // Local panel class that renders a simple live-updating line graph
        class DiskUsageGraphPanel extends JPanel {
            private final float[] samples = new float[200];
            private final float[] samples2 = new float[200];
            private final Timer timer;

            DiskUsageGraphPanel() {
                setPreferredSize(new Dimension(800, 400));
                setBackground(Color.BLACK);

                // initialize samples
                for (int i = 0; i < samples.length; i++)
                    samples[i] = 0f;
                for (int a=0; a<samples2.length; a++)
                    samples2[a] = 0f;
				// update samples periodically (simulated data)
				timer = new Timer(1000, e -> {
					// shift older values left by one
					System.arraycopy(samples, 1, samples, 0, samples.length - 1);
					System.arraycopy(samples2, 1, samples2, 0, samples2.length - 1);
					// replace this with real disk data when available
                    System.out.printf("Disk Usage %f\n",(float) disk.readBytesFormatNumbers(0) / disk.transferTimeFormatNumbers(0));
					samples[samples.length - 1] = (float) disk.readBytesFormatNumbers(0) / (disk.transferTimeFormatNumbers(0)*10*10*10*10*10);
					samples2[samples2.length - 1] = (float) disk.writeBytesFormatNumbers(0) / (disk.transferTimeFormatNumbers(0)*10*10*10*10*10);
					repaint();
				});
                timer.start();
            }

            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                Graphics2D g2 = (Graphics2D) g;
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

                int w = getWidth();
                int h = getHeight();

                // background
                g2.setColor(Color.DARK_GRAY);
                g2.fillRect(0, 0, w, h);

                // grid
                g2.setColor(new Color(80, 80, 80));
                for (int y = 0; y <= 4; y++) {
                    int yy = y * h / 4;
                    g2.drawLine(0, yy, w, yy);
                }

				// draw first line (reads)
				int len = samples.length;
				g2.setColor(Color.GREEN);
				int prevX = 0;
				int prevY = h - Math.round(samples[0] * h);
				for (int i = 1; i < len; i++) {
					int x = i * w / (len - 1);
					int y = h - Math.round(samples[i] * h);
					g2.drawLine(prevX, prevY, x, y);
					prevX = x;
					prevY = y;
				}

				// draw second line (writes)
				g2.setColor(Color.RED);
				int prevX2 = 0;
				int prevY2 = h - Math.round(samples2[0] * h);
				for (int i = 1; i < len; i++) {
					int x = i * w / (len - 1);
					int y = h - Math.round(samples2[i] * h);
					g2.drawLine(prevX2, prevY2, x, y);
					prevX2 = x;
					prevY2 = y;
				}

				// label and legend
				g2.setColor(Color.WHITE);
				g2.drawString("Simulated Disk Usage (%)", 8, 18);
				// legend boxes
				int legendX = w - 150;
				int legendY = 8;
				g2.setColor(Color.GREEN);
				g2.fillRect(legendX, legendY, 12, 12);
				g2.setColor(Color.WHITE);
				g2.drawString("Read", legendX + 18, legendY + 11);
				g2.setColor(Color.RED);
				g2.fillRect(legendX + 60, legendY, 12, 12);
				g2.setColor(Color.WHITE);
				g2.drawString("Write", legendX + 18 + 60, legendY + 11);
            }

            public void removeNotify() {
                timer.stop();
                super.removeNotify();
            }
        }

        showGraphButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
				JFrame graphFrame = new JFrame("Disk Usage Graph");
                graphFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                DiskUsageGraphPanel panel = new DiskUsageGraphPanel();
                graphFrame.getContentPane().add(panel);
                graphFrame.pack();
                graphFrame.setLocationRelativeTo(null);
                graphFrame.setVisible(true);
            }
        });



        setVisible(true);
	}
}

class NetworkMenuFrame extends AbstractSystemInfoFrame {
	public NetworkMenuFrame() {
		super();
		setTitle("System Info - Network");

        // Main Menu Button
        JButton mainMenuButton = new  JButton("Main Menu");
        mainMenuButton.setBounds(0, 0, 150, 50);

        mainMenuButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                new MainMenuFrame();
                dispose();
            }
        });

        add(mainMenuButton);
	}
}

class USBDevicesMenuFrame extends AbstractSystemInfoFrame {
	public USBDevicesMenuFrame() {
		super();
        USB usb = new USB();
		setTitle("System Info - USB Devices");
        // Main Menu Button
        JButton mainMenuButton = new  JButton("Main Menu");
        mainMenuButton.setBounds(0, 0, 150, 50);
        List<USB.USBInfo> usbList = USB.getAllUsbInfo();
        int sizeof=usbList.size();
        String[] choices = new String[sizeof];
        for (int i=0;i<sizeof;i++){
            choices[i]=usbList.get(i).name;
        }

        //List<String> choices = new java.util.ArrayList<>(List.of());
        //for(int j=0;j<sizeof;j++){
        //    choices.add(String.valueOf(j));
        //}

        final JComboBox<String> cb = new JComboBox<String>(choices);
        cb.setSelectedIndex(0);
        cb.setBounds(480, 0, 100, 30);
        add(cb);


        mainMenuButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                new MainMenuFrame();
                dispose();
            }
        });
        setVisible(true);
        add(mainMenuButton);
	}
}
